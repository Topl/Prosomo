// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package serializer

@SerialVersionUID(0L)
final case class NoncedBox(
    typeOfBox: _root_.scala.Predef.String,
    publicKey: _root_.com.google.protobuf.ByteString,
    nonce: _root_.scala.Long
    ) extends scalapb.GeneratedMessage with scalapb.Message[NoncedBox] with scalapb.lenses.Updatable[NoncedBox] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, typeOfBox)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, publicKey)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, nonce)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      _output__.writeString(1, typeOfBox)
      _output__.writeBytes(2, publicKey)
      _output__.writeInt64(3, nonce)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): serializer.NoncedBox = {
      var __typeOfBox = this.typeOfBox
      var __publicKey = this.publicKey
      var __nonce = this.nonce
      var __requiredFields0: _root_.scala.Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __typeOfBox = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __publicKey = _input__.readBytes()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __nonce = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      serializer.NoncedBox(
          typeOfBox = __typeOfBox,
          publicKey = __publicKey,
          nonce = __nonce
      )
    }
    def withTypeOfBox(__v: _root_.scala.Predef.String): NoncedBox = copy(typeOfBox = __v)
    def withPublicKey(__v: _root_.com.google.protobuf.ByteString): NoncedBox = copy(publicKey = __v)
    def withNonce(__v: _root_.scala.Long): NoncedBox = copy(nonce = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => typeOfBox
        case 2 => publicKey
        case 3 => nonce
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(typeOfBox)
        case 2 => _root_.scalapb.descriptors.PByteString(publicKey)
        case 3 => _root_.scalapb.descriptors.PLong(nonce)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = serializer.NoncedBox
}

object NoncedBox extends scalapb.GeneratedMessageCompanion[serializer.NoncedBox] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[serializer.NoncedBox] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): serializer.NoncedBox = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    serializer.NoncedBox(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Long]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[serializer.NoncedBox] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      serializer.NoncedBox(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.com.google.protobuf.ByteString],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Long]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SerializerProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SerializerProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = serializer.NoncedBox(
    typeOfBox = "",
    publicKey = _root_.com.google.protobuf.ByteString.EMPTY,
    nonce = 0L
  )
  implicit class NoncedBoxLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, serializer.NoncedBox]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, serializer.NoncedBox](_l) {
    def typeOfBox: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.typeOfBox)((c_, f_) => c_.copy(typeOfBox = f_))
    def publicKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.publicKey)((c_, f_) => c_.copy(publicKey = f_))
    def nonce: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.nonce)((c_, f_) => c_.copy(nonce = f_))
  }
  final val TYPEOFBOX_FIELD_NUMBER = 1
  final val PUBLICKEY_FIELD_NUMBER = 2
  final val NONCE_FIELD_NUMBER = 3
}
