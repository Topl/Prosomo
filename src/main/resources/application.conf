params {
  //dev mode toggle
  devMode = false
  //use the gui for runtime user interaction
  useGui = true
  //time server for NTP sync
  timeServer = "time-a.nist.gov"
  //seed for pseudo random runs
  inputSeed = "prosomo_testnet"
  //number genesis of stakeholders
  numHolders = 32
  //the minumum index of local holders, set to -1 for no holders
  holderIndexMin = 0
  //the maximum index of local holders, set to -1 for no holders
  holderIndexMax = 15
  //time scale for slot time and delay parameters
  timeScale = 1.0
  //duration of slot in milliseconds
  slotT = 1000
  //delay in milliseconds per killometer in router model
  delay_ms_km = 0.02
  //delay in ms per byte in router model
  delay_ms_byte = 2.0e-4
  //delay random noise
  delay_ms_noise = 100.0
  //use router if true, use direct communication if false
  useRouting = true
  //use network delay parameterization if true
  useDelayParam = false
  //alert stake ratio
  alpha_s = 1.0
  //participating stake ratio
  beta_s = 1.0
  //epoch paramter
  epsilon_s = 0.081775
  // checkpoint depth in slots, k > 192*delta/epsilon*beta useDelayParam = true
  k_s = 23480
  // epoch length, R >= 3k/2f if useDelayParam = true
  epochLength = 86400
  // slot window for chain selection, s = k/4f if useDelayParam = true
  slotWindow = 14400
  //active slot coefficient, f <= 1-exp(1/(delta_s+1))*(1+epsilon_s)/(2.0*alpha_s) if useDelayParam = true
  f_s = 0.2
  //dynamic difficulty
  f_dynamic = true
  //min active slot coeff
  f_min = 0.005
  //max active slot coeff
  f_max = 0.4
  //number of slots to alter difficulty, scales linearly
  num_f = 40
  //order of accuracy for convergent series
  o_n = 16
  //number of holders on gossip list for sending new blocks and transactions
  numGossipers = 6
  //use gossiper protocol
  useGossipProtocol = true
  //max number of tries for a tine to ask for parent blocks
  tineMaxTries = 10
  //max depth that can be returned from an actor
  tineMaxDepth = 100
  //time out for dropped messages from coordinator, in seconds
  waitTime = 3600
  //duration between update tics that stakeholder actors send to themselves, in milliseconds
  updateTime = 10
  //duration between update tics that coordinator and router actors send to themselves, in milliseconds
  commandUpdateTime = 10
  //Issue transactions if true
  transactionFlag = true
  // p = txProbability => chance of issuing transaction per coordinator update
  txProbability = 0.4
  //number of txs per block
  txPerBlock = 3000
  //max number of transactions to be issued over lifetime of simulation
  txMax = 20000000
  //transaction confirmation depth in blocks
  confirmationDepth = 10
  //max initial stake
  initStakeMax = 1.0e9
  //min initial stake
  initStakeMin = 1000.0
  //max random transaction delta
  maxTransfer = 5.0e6
  //reward for forging blocks
  forgerReward = 1000000
  //ratio of transaction amount taken as fee by the forger
  transactionFee = 0.01
  //uses randomness for public key seed and initial stake, set to false for deterministic run
  randomFlag = true
  //use fencing and action based round progression to enforce deterministic runs, set true for deterministic run
  useFencing = false
  //when true, if system cpu load is too high the coordinator will stall to allow stakeholders to catch up
  performanceFlag = false
  //threshold of cpu usage above which coordinator will stall if performanceFlag = true
  systemLoadThreshold = 0.95
  //number of values to average for load threshold
  numAverageLoad = 3
  //print Stakeholder 0 status per slot if true
  printFlag = true
  //print Stakeholder 0 execution time per slot if true
  timingFlag = true
  //Record data if true, plot data points with ./cmd.sh and enter command: plot
  dataOutFlag = false
  //use LSMStore to store block data to disk
  storageFlag = true
  //max number of entries in cache for block and state storage
  cacheSize = 50
  //database refresh interval in slots
  refreshInterval = 1800
  //path for data output files
  dataFileDir = "data"
  //type of genesis stake distribution
  stakeDistribution = "flat"
  //exponential scale factor for stake distribution
  stakeScale = 0.5
}

scorex{
  # Execution context for all tasks, except of akka actors.
  executionContext {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 16
    }
    throughput = 1
  }
  # Node data directory
  dataDir = "scorex"
  # Node logs directory
  logDir = "log"
  # Node's REST API settings
  restApi {
    # Network address to bind to
    bindAddress = "127.0.0.1:6886"
    # Hash of API key string
    #apiKeyHash = ""
    # Enable/disable CORS support.
    # This is an optional param. It would allow cors in case if this setting is set.
    # If this setting will be omitted cors will be prohibited.
    corsAllowedOrigin = "*"
    # request processing timeout
    timeout = 5s
  }
  # P2P Network settings
  network {
    #####################################################
    # Node information to be declared during handshake  #
    #####################################################
    # Node name to send during handshake
    nodeName = "prosomo"
    # Network version send in handshake
    appVersion = 0.7.5
    # Network agent name. May contain information about client code
    # stack, starting from core code-base up to the end graphical interface.
    # Basic format is `/Name:Version(comments)/Name:Version/.../`,
    agentName = "node2"
    # Network address
    bindAddress = "0.0.0.0:9084"
    ########################
    # Connection settings  #
    ########################
    # Magic bytes, that will be added to every p2p message to allow
    # distinguish different networks (e.g. testnet/mainnet).
    magicBytes = [12, 34, 56, 78]
    # String with IP address and port to send as external address during handshake.
    # Could be set automatically if UPnP is enabled.
    #
    # If `declared-address` is set, which is the common scenario for nodes running in the cloud,
    # the node will just listen to incoming connections on `bindAddress:port` and
    # broadcast its `declaredAddress` to its peers.
    # UPnP is supposed to be disabled in this scenario.
    #
    # If declared address is not set and UPnP is not enabled, the node will not listen to incoming connections at all.
    #
    # If declared address is not set and UPnP is enabled, the node will attempt to connect to an IGD, retrieve its
    # external IP address and configure the gateway to allow traffic through. If the node succeeds, the IGD's external
    # IP address becomes the node's declared address.
    #
    # In some cases, you may both set `decalredAddress` and enable UPnP (e.g. when IGD can't reliably determine its
    # external IP address). In such cases the node will attempt to configure an IGD to pass traffic from external port
    # to `bind-address:port`. Please note, however, that this setup is not recommended.
    # declaredAddress = ""

    # Enable UPnP tunnel creation only if you router/gateway supports it. Useful if your node is runnin in home
    # network. Completely useless if you node is in cloud.
    upnpEnabled = no
    # Accept only local connections
    localOnly = false
    # UPnP timeouts
    # upnp-gateway-timeout = 7s
    # upnp-discover-timeout = 3s
    # Add delay for sending message
    # addedMaxDelay = 0ms
    ##################
    # Peers settings #
    ##################
    # Network handshake timeout
    handshakeTimeout = 30s
    # List of IP addresses of well known nodes.
    knownPeers = []
    # Interval between GetPeers messages to be send by our node to a random one
    getPeersInterval = 20s
    # Number of network connections
    maxConnections = 20
    # Network connection timeout
    connectionTimeout = 10s
    ############################
    # Delivery settings limits #
    ############################
    # Network delivery timeout
    deliveryTimeout = 20s
    # Max number of delivery checks. Stop expecting modifier (and penalize peer) if it was not delivered on time
    maxDeliveryChecks = 2
    ############
    # Timeouts #
    ############
    # Interval between `SyncInfo` messages when our node is not synchronized yet
    syncInterval = 5s
    # Interval between `SyncInfo` messages when our node is already synchronized
    syncIntervalStable = 20s
    # Synchronization timeout
    syncTimeout = 5s
    # Synchronization status update interval
    syncStatusRefresh = 2m
    # Synchronization status update interval for stable regime
    syncStatusRefreshStable = 4m
    # Network controller timeout
    controllerTimeout = 5s
    ###############
    # Size limits #
    ###############
    # Maximum income package size
    maxPacketSize = 1048576
    # Maximum size of a handshaking message
    maxHandshakeSize = 8096
    # Accept maximum inv objects
    maxInvObjects = 512
    # Desired number of inv objects. Our requests will have this size.
    desiredInvObjects = 512
    # How many persistent modifiers to store in the cache.
    # The cache stores modifiers that are waiting to be applied.
    maxModifiersCacheSize = 1024
    # Maximum number of PeerSpec objects in one Peers message
    maxPeerSpecObjects = 64
    # Default ban duration, unless permanent penalty is applied
    temporalBanDuration = 60m
    # Misbehaving peer penalty score will not be increased withing this time interval,
    # unless permanent penalty is applied
    penaltySafeInterval = 5m
    # Max penalty score peer can accumulate before being banned
    penaltyScoreThreshold = 100
  }
  ntp {
    # NTP server address
    server = "pool.ntp.org"
    # update time rate
    updateEvery = 30m
    # server answer timeout
    timeout = 30s
  }
}