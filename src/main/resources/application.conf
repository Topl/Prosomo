app {
  modifierIdSize: 32
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = on
  actor {
    debug {
      receive = on
      // autoreceive = on
      // lifecycle = on
      // event-stream = on
    }
    //default-dispatcher {
      //type = Dispatcher
      //executor = "thread-pool-executor"
      //thread-pool-executor {
        //keep-alive-time = 60s
        //fixed-pool-size = 64

        //core-pool-size-min = 16
        //core-pool-size-factor = 1.0
        //core-pool-size-max = 64

        //max-pool-size-min = 16
        //max-pool-size-factor = 1.0
        //max-pool-size-max = 64
      //}
    //}
  }

  //loglevel = "OFF"
}

params {
  //bootstrap IP
  knownPeer = ""
  //rpc port
  rpcPort = ""
  //bind address
  bindAddress = ""
  //declared address
  myAddress = ""
  //time server for NTP sync
  timeServer = "time-a.nist.gov"
  //seed for pseudo random runs
  inputSeed = "prosomo_testnet"
  //number genesis of stakeholders
  numHolders = 8
  //the minumum index of local holders, set to -1 for no holders
  holderIndexMin = 0
  //the maximum index of local holders, set to -1 for no holders
  holderIndexMax = 7
  //time scale for slot time and delay parameters
  timeScale = 1.0
  //duration of slot in milliseconds
  slotT = 1000
  //delay in milliseconds per killometer in router model
  delay_ms_km = 0.02
  //delay in ms per byte in router model
  delay_ms_byte = 2.0e-4
  //delay random noise
  delay_ms_noise = 100.0
  //use router if true, use direct communication if false
  useRouting = true
  //use network delay parameterization if true
  useDelayParam = false
  //alert stake ratio
  alpha_s = 1.0
  //participating stake ratio
  beta_s = 1.0
  //epoch paramter
  epsilon_s = 0.081775
  // checkpoint depth in slots, k > 192*delta/epsilon*beta useDelayParam = true
  k_s = 23480
  // epoch length, R >= 3k/2f if useDelayParam = true
  epochLength = 86400
  // slot window for chain selection, s = k/4f if useDelayParam = true
  slotWindow = 14400
  //active slot coefficient, f <= 1-exp(1/(delta_s+1))*(1+epsilon_s)/(2.0*alpha_s) if useDelayParam = true
  f_s = 0.2
  //order of accuracy for convergent series
  o_n = 16
  //simulation runtime in slots
  L_s = 2000000
  //number of holders on gossip list for sending new blocks and transactions
  numGossipers = 6
  //use gossiper protocol
  useGossipProtocol = true
  //max number of tries for a tine to ask for parent blocks
  tineMaxTries = 10
  //max depth in multiples of confirmation depth that can be returned from an actor
  tineMaxDepth = 10
  //time out for dropped messages from coordinator, in seconds
  waitTime = 60
  //duration between update tics that stakeholder actors send to themselves, in milliseconds
  updateTime = 10
  //duration between update tics that coordinator and router actors send to themselves, in milliseconds
  commandUpdateTime = 10
  //Issue transactions if true
  transactionFlag = true
  // p = txProbability => chance of issuing transaction per coordinator update
  txProbability = 0.3
  //number of txs per block
  txPerBlock = 3000
  //max number of transactions to be issued over lifetime of simulation
  txMax = 20000000
  //transaction confirmation depth in blocks
  confirmationDepth = 10
  //max initial stake
  initStakeMax = 1.0e9
  //min initial stake
  initStakeMin = 1000.0
  //max random transaction delta
  maxTransfer = 5.0e6
  //reward for forging blocks
  forgerReward = 1000000
  //ratio of transaction amount taken as fee by the forger
  transactionFee = 0.01
  //uses randomness for public key seed and initial stake, set to false for deterministic run
  randomFlag = true
  //use fencing and action based round progression to enforce deterministic runs, set true for deterministic run
  useFencing = false
  //when true, if system cpu load is too high the coordinator will stall to allow stakeholders to catch up
  performanceFlag = false
  //threshold of cpu usage above which coordinator will stall if performanceFlag = true
  systemLoadThreshold = 0.95
  //number of values to average for load threshold
  numAverageLoad = 3
  //print Stakeholder 0 status per slot if true
  printFlag = true
  //print Stakeholder 0 execution time per slot if true
  timingFlag = true
  //Record data if true, plot data points with ./cmd.sh and enter command: plot
  dataOutFlag = false
  //use LSMStore to store block data to disk
  storageFlag = true
  //max number of entries in cache for block and state storage
  cacheSize = 50
  //database refresh interval in slots
  refreshInterval = 1800
  //path for data output files
  dataFileDir = "data"
  //bifrost settings
  settingsFilename = "bootstrap.json"
  //type of genesis stake distribution
  stakeDistribution = "flat"
  //exponential scale factor for stake distribution
  stakeScale = 0.5
}
